// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/kkrishguptaa/whitestone-capital/apps/api/ent/predicate"
	"github.com/kkrishguptaa/whitestone-capital/apps/api/ent/schema"
	"github.com/kkrishguptaa/whitestone-capital/apps/api/ent/stake"
	"github.com/kkrishguptaa/whitestone-capital/apps/api/ent/stock"
)

// StockUpdate is the builder for updating Stock entities.
type StockUpdate struct {
	config
	hooks    []Hook
	mutation *StockMutation
}

// Where appends a list predicates to the StockUpdate builder.
func (su *StockUpdate) Where(ps ...predicate.Stock) *StockUpdate {
	su.mutation.Where(ps...)
	return su
}

// SetSymbol sets the "symbol" field.
func (su *StockUpdate) SetSymbol(s string) *StockUpdate {
	su.mutation.SetSymbol(s)
	return su
}

// SetNillableSymbol sets the "symbol" field if the given value is not nil.
func (su *StockUpdate) SetNillableSymbol(s *string) *StockUpdate {
	if s != nil {
		su.SetSymbol(*s)
	}
	return su
}

// SetName sets the "name" field.
func (su *StockUpdate) SetName(s string) *StockUpdate {
	su.mutation.SetName(s)
	return su
}

// SetNillableName sets the "name" field if the given value is not nil.
func (su *StockUpdate) SetNillableName(s *string) *StockUpdate {
	if s != nil {
		su.SetName(*s)
	}
	return su
}

// SetActivity sets the "activity" field.
func (su *StockUpdate) SetActivity(s *schema.Activity) *StockUpdate {
	su.mutation.SetActivity(s)
	return su
}

// ClearActivity clears the value of the "activity" field.
func (su *StockUpdate) ClearActivity() *StockUpdate {
	su.mutation.ClearActivity()
	return su
}

// AddStakeIDs adds the "stakes" edge to the Stake entity by IDs.
func (su *StockUpdate) AddStakeIDs(ids ...int) *StockUpdate {
	su.mutation.AddStakeIDs(ids...)
	return su
}

// AddStakes adds the "stakes" edges to the Stake entity.
func (su *StockUpdate) AddStakes(s ...*Stake) *StockUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return su.AddStakeIDs(ids...)
}

// Mutation returns the StockMutation object of the builder.
func (su *StockUpdate) Mutation() *StockMutation {
	return su.mutation
}

// ClearStakes clears all "stakes" edges to the Stake entity.
func (su *StockUpdate) ClearStakes() *StockUpdate {
	su.mutation.ClearStakes()
	return su
}

// RemoveStakeIDs removes the "stakes" edge to Stake entities by IDs.
func (su *StockUpdate) RemoveStakeIDs(ids ...int) *StockUpdate {
	su.mutation.RemoveStakeIDs(ids...)
	return su
}

// RemoveStakes removes "stakes" edges to Stake entities.
func (su *StockUpdate) RemoveStakes(s ...*Stake) *StockUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return su.RemoveStakeIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (su *StockUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, su.sqlSave, su.mutation, su.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (su *StockUpdate) SaveX(ctx context.Context) int {
	affected, err := su.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (su *StockUpdate) Exec(ctx context.Context) error {
	_, err := su.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (su *StockUpdate) ExecX(ctx context.Context) {
	if err := su.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (su *StockUpdate) check() error {
	if v, ok := su.mutation.Symbol(); ok {
		if err := stock.SymbolValidator(v); err != nil {
			return &ValidationError{Name: "symbol", err: fmt.Errorf(`ent: validator failed for field "Stock.symbol": %w`, err)}
		}
	}
	if v, ok := su.mutation.Name(); ok {
		if err := stock.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Stock.name": %w`, err)}
		}
	}
	return nil
}

func (su *StockUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := su.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(stock.Table, stock.Columns, sqlgraph.NewFieldSpec(stock.FieldID, field.TypeInt))
	if ps := su.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := su.mutation.Symbol(); ok {
		_spec.SetField(stock.FieldSymbol, field.TypeString, value)
	}
	if value, ok := su.mutation.Name(); ok {
		_spec.SetField(stock.FieldName, field.TypeString, value)
	}
	if value, ok := su.mutation.Activity(); ok {
		_spec.SetField(stock.FieldActivity, field.TypeJSON, value)
	}
	if su.mutation.ActivityCleared() {
		_spec.ClearField(stock.FieldActivity, field.TypeJSON)
	}
	if su.mutation.StakesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   stock.StakesTable,
			Columns: []string{stock.StakesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(stake.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.RemovedStakesIDs(); len(nodes) > 0 && !su.mutation.StakesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   stock.StakesTable,
			Columns: []string{stock.StakesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(stake.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.StakesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   stock.StakesTable,
			Columns: []string{stock.StakesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(stake.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, su.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{stock.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	su.mutation.done = true
	return n, nil
}

// StockUpdateOne is the builder for updating a single Stock entity.
type StockUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *StockMutation
}

// SetSymbol sets the "symbol" field.
func (suo *StockUpdateOne) SetSymbol(s string) *StockUpdateOne {
	suo.mutation.SetSymbol(s)
	return suo
}

// SetNillableSymbol sets the "symbol" field if the given value is not nil.
func (suo *StockUpdateOne) SetNillableSymbol(s *string) *StockUpdateOne {
	if s != nil {
		suo.SetSymbol(*s)
	}
	return suo
}

// SetName sets the "name" field.
func (suo *StockUpdateOne) SetName(s string) *StockUpdateOne {
	suo.mutation.SetName(s)
	return suo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (suo *StockUpdateOne) SetNillableName(s *string) *StockUpdateOne {
	if s != nil {
		suo.SetName(*s)
	}
	return suo
}

// SetActivity sets the "activity" field.
func (suo *StockUpdateOne) SetActivity(s *schema.Activity) *StockUpdateOne {
	suo.mutation.SetActivity(s)
	return suo
}

// ClearActivity clears the value of the "activity" field.
func (suo *StockUpdateOne) ClearActivity() *StockUpdateOne {
	suo.mutation.ClearActivity()
	return suo
}

// AddStakeIDs adds the "stakes" edge to the Stake entity by IDs.
func (suo *StockUpdateOne) AddStakeIDs(ids ...int) *StockUpdateOne {
	suo.mutation.AddStakeIDs(ids...)
	return suo
}

// AddStakes adds the "stakes" edges to the Stake entity.
func (suo *StockUpdateOne) AddStakes(s ...*Stake) *StockUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return suo.AddStakeIDs(ids...)
}

// Mutation returns the StockMutation object of the builder.
func (suo *StockUpdateOne) Mutation() *StockMutation {
	return suo.mutation
}

// ClearStakes clears all "stakes" edges to the Stake entity.
func (suo *StockUpdateOne) ClearStakes() *StockUpdateOne {
	suo.mutation.ClearStakes()
	return suo
}

// RemoveStakeIDs removes the "stakes" edge to Stake entities by IDs.
func (suo *StockUpdateOne) RemoveStakeIDs(ids ...int) *StockUpdateOne {
	suo.mutation.RemoveStakeIDs(ids...)
	return suo
}

// RemoveStakes removes "stakes" edges to Stake entities.
func (suo *StockUpdateOne) RemoveStakes(s ...*Stake) *StockUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return suo.RemoveStakeIDs(ids...)
}

// Where appends a list predicates to the StockUpdate builder.
func (suo *StockUpdateOne) Where(ps ...predicate.Stock) *StockUpdateOne {
	suo.mutation.Where(ps...)
	return suo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (suo *StockUpdateOne) Select(field string, fields ...string) *StockUpdateOne {
	suo.fields = append([]string{field}, fields...)
	return suo
}

// Save executes the query and returns the updated Stock entity.
func (suo *StockUpdateOne) Save(ctx context.Context) (*Stock, error) {
	return withHooks(ctx, suo.sqlSave, suo.mutation, suo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (suo *StockUpdateOne) SaveX(ctx context.Context) *Stock {
	node, err := suo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (suo *StockUpdateOne) Exec(ctx context.Context) error {
	_, err := suo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (suo *StockUpdateOne) ExecX(ctx context.Context) {
	if err := suo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (suo *StockUpdateOne) check() error {
	if v, ok := suo.mutation.Symbol(); ok {
		if err := stock.SymbolValidator(v); err != nil {
			return &ValidationError{Name: "symbol", err: fmt.Errorf(`ent: validator failed for field "Stock.symbol": %w`, err)}
		}
	}
	if v, ok := suo.mutation.Name(); ok {
		if err := stock.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Stock.name": %w`, err)}
		}
	}
	return nil
}

func (suo *StockUpdateOne) sqlSave(ctx context.Context) (_node *Stock, err error) {
	if err := suo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(stock.Table, stock.Columns, sqlgraph.NewFieldSpec(stock.FieldID, field.TypeInt))
	id, ok := suo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Stock.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := suo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, stock.FieldID)
		for _, f := range fields {
			if !stock.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != stock.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := suo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := suo.mutation.Symbol(); ok {
		_spec.SetField(stock.FieldSymbol, field.TypeString, value)
	}
	if value, ok := suo.mutation.Name(); ok {
		_spec.SetField(stock.FieldName, field.TypeString, value)
	}
	if value, ok := suo.mutation.Activity(); ok {
		_spec.SetField(stock.FieldActivity, field.TypeJSON, value)
	}
	if suo.mutation.ActivityCleared() {
		_spec.ClearField(stock.FieldActivity, field.TypeJSON)
	}
	if suo.mutation.StakesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   stock.StakesTable,
			Columns: []string{stock.StakesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(stake.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.RemovedStakesIDs(); len(nodes) > 0 && !suo.mutation.StakesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   stock.StakesTable,
			Columns: []string{stock.StakesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(stake.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.StakesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   stock.StakesTable,
			Columns: []string{stock.StakesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(stake.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Stock{config: suo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, suo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{stock.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	suo.mutation.done = true
	return _node, nil
}

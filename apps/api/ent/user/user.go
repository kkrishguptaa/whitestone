// Code generated by ent, DO NOT EDIT.

package user

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the user type in the database.
	Label = "user"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldSlackID holds the string denoting the slack_id field in the database.
	FieldSlackID = "slack_id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// EdgeStakes holds the string denoting the stakes edge name in mutations.
	EdgeStakes = "stakes"
	// Table holds the table name of the user in the database.
	Table = "users"
	// StakesTable is the table that holds the stakes relation/edge.
	StakesTable = "stakes"
	// StakesInverseTable is the table name for the Stake entity.
	// It exists in this package in order to avoid circular dependency with the "stake" package.
	StakesInverseTable = "stakes"
	// StakesColumn is the table column denoting the stakes relation/edge.
	StakesColumn = "user_stakes"
)

// Columns holds all SQL columns for user fields.
var Columns = []string{
	FieldID,
	FieldSlackID,
	FieldName,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// SlackIDValidator is a validator for the "slack_id" field. It is called by the builders before save.
	SlackIDValidator func(string) error
	// NameValidator is a validator for the "name" field. It is called by the builders before save.
	NameValidator func(string) error
)

// OrderOption defines the ordering options for the User queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// BySlackID orders the results by the slack_id field.
func BySlackID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSlackID, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByStakesCount orders the results by stakes count.
func ByStakesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newStakesStep(), opts...)
	}
}

// ByStakes orders the results by stakes terms.
func ByStakes(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newStakesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newStakesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(StakesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, StakesTable, StakesColumn),
	)
}

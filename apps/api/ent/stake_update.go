// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/kkrishguptaa/whitestone-capital/apps/api/ent/predicate"
	"github.com/kkrishguptaa/whitestone-capital/apps/api/ent/stake"
	"github.com/kkrishguptaa/whitestone-capital/apps/api/ent/stock"
	"github.com/kkrishguptaa/whitestone-capital/apps/api/ent/user"
)

// StakeUpdate is the builder for updating Stake entities.
type StakeUpdate struct {
	config
	hooks    []Hook
	mutation *StakeMutation
}

// Where appends a list predicates to the StakeUpdate builder.
func (su *StakeUpdate) Where(ps ...predicate.Stake) *StakeUpdate {
	su.mutation.Where(ps...)
	return su
}

// SetAmount sets the "amount" field.
func (su *StakeUpdate) SetAmount(i int) *StakeUpdate {
	su.mutation.ResetAmount()
	su.mutation.SetAmount(i)
	return su
}

// SetNillableAmount sets the "amount" field if the given value is not nil.
func (su *StakeUpdate) SetNillableAmount(i *int) *StakeUpdate {
	if i != nil {
		su.SetAmount(*i)
	}
	return su
}

// AddAmount adds i to the "amount" field.
func (su *StakeUpdate) AddAmount(i int) *StakeUpdate {
	su.mutation.AddAmount(i)
	return su
}

// SetUserID sets the "user" edge to the User entity by ID.
func (su *StakeUpdate) SetUserID(id uuid.UUID) *StakeUpdate {
	su.mutation.SetUserID(id)
	return su
}

// SetUser sets the "user" edge to the User entity.
func (su *StakeUpdate) SetUser(u *User) *StakeUpdate {
	return su.SetUserID(u.ID)
}

// SetStockID sets the "stock" edge to the Stock entity by ID.
func (su *StakeUpdate) SetStockID(id int) *StakeUpdate {
	su.mutation.SetStockID(id)
	return su
}

// SetStock sets the "stock" edge to the Stock entity.
func (su *StakeUpdate) SetStock(s *Stock) *StakeUpdate {
	return su.SetStockID(s.ID)
}

// Mutation returns the StakeMutation object of the builder.
func (su *StakeUpdate) Mutation() *StakeMutation {
	return su.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (su *StakeUpdate) ClearUser() *StakeUpdate {
	su.mutation.ClearUser()
	return su
}

// ClearStock clears the "stock" edge to the Stock entity.
func (su *StakeUpdate) ClearStock() *StakeUpdate {
	su.mutation.ClearStock()
	return su
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (su *StakeUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, su.sqlSave, su.mutation, su.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (su *StakeUpdate) SaveX(ctx context.Context) int {
	affected, err := su.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (su *StakeUpdate) Exec(ctx context.Context) error {
	_, err := su.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (su *StakeUpdate) ExecX(ctx context.Context) {
	if err := su.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (su *StakeUpdate) check() error {
	if v, ok := su.mutation.Amount(); ok {
		if err := stake.AmountValidator(v); err != nil {
			return &ValidationError{Name: "amount", err: fmt.Errorf(`ent: validator failed for field "Stake.amount": %w`, err)}
		}
	}
	if su.mutation.UserCleared() && len(su.mutation.UserIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Stake.user"`)
	}
	if su.mutation.StockCleared() && len(su.mutation.StockIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Stake.stock"`)
	}
	return nil
}

func (su *StakeUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := su.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(stake.Table, stake.Columns, sqlgraph.NewFieldSpec(stake.FieldID, field.TypeInt))
	if ps := su.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := su.mutation.Amount(); ok {
		_spec.SetField(stake.FieldAmount, field.TypeInt, value)
	}
	if value, ok := su.mutation.AddedAmount(); ok {
		_spec.AddField(stake.FieldAmount, field.TypeInt, value)
	}
	if su.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   stake.UserTable,
			Columns: []string{stake.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   stake.UserTable,
			Columns: []string{stake.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if su.mutation.StockCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   stake.StockTable,
			Columns: []string{stake.StockColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(stock.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.StockIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   stake.StockTable,
			Columns: []string{stake.StockColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(stock.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, su.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{stake.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	su.mutation.done = true
	return n, nil
}

// StakeUpdateOne is the builder for updating a single Stake entity.
type StakeUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *StakeMutation
}

// SetAmount sets the "amount" field.
func (suo *StakeUpdateOne) SetAmount(i int) *StakeUpdateOne {
	suo.mutation.ResetAmount()
	suo.mutation.SetAmount(i)
	return suo
}

// SetNillableAmount sets the "amount" field if the given value is not nil.
func (suo *StakeUpdateOne) SetNillableAmount(i *int) *StakeUpdateOne {
	if i != nil {
		suo.SetAmount(*i)
	}
	return suo
}

// AddAmount adds i to the "amount" field.
func (suo *StakeUpdateOne) AddAmount(i int) *StakeUpdateOne {
	suo.mutation.AddAmount(i)
	return suo
}

// SetUserID sets the "user" edge to the User entity by ID.
func (suo *StakeUpdateOne) SetUserID(id uuid.UUID) *StakeUpdateOne {
	suo.mutation.SetUserID(id)
	return suo
}

// SetUser sets the "user" edge to the User entity.
func (suo *StakeUpdateOne) SetUser(u *User) *StakeUpdateOne {
	return suo.SetUserID(u.ID)
}

// SetStockID sets the "stock" edge to the Stock entity by ID.
func (suo *StakeUpdateOne) SetStockID(id int) *StakeUpdateOne {
	suo.mutation.SetStockID(id)
	return suo
}

// SetStock sets the "stock" edge to the Stock entity.
func (suo *StakeUpdateOne) SetStock(s *Stock) *StakeUpdateOne {
	return suo.SetStockID(s.ID)
}

// Mutation returns the StakeMutation object of the builder.
func (suo *StakeUpdateOne) Mutation() *StakeMutation {
	return suo.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (suo *StakeUpdateOne) ClearUser() *StakeUpdateOne {
	suo.mutation.ClearUser()
	return suo
}

// ClearStock clears the "stock" edge to the Stock entity.
func (suo *StakeUpdateOne) ClearStock() *StakeUpdateOne {
	suo.mutation.ClearStock()
	return suo
}

// Where appends a list predicates to the StakeUpdate builder.
func (suo *StakeUpdateOne) Where(ps ...predicate.Stake) *StakeUpdateOne {
	suo.mutation.Where(ps...)
	return suo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (suo *StakeUpdateOne) Select(field string, fields ...string) *StakeUpdateOne {
	suo.fields = append([]string{field}, fields...)
	return suo
}

// Save executes the query and returns the updated Stake entity.
func (suo *StakeUpdateOne) Save(ctx context.Context) (*Stake, error) {
	return withHooks(ctx, suo.sqlSave, suo.mutation, suo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (suo *StakeUpdateOne) SaveX(ctx context.Context) *Stake {
	node, err := suo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (suo *StakeUpdateOne) Exec(ctx context.Context) error {
	_, err := suo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (suo *StakeUpdateOne) ExecX(ctx context.Context) {
	if err := suo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (suo *StakeUpdateOne) check() error {
	if v, ok := suo.mutation.Amount(); ok {
		if err := stake.AmountValidator(v); err != nil {
			return &ValidationError{Name: "amount", err: fmt.Errorf(`ent: validator failed for field "Stake.amount": %w`, err)}
		}
	}
	if suo.mutation.UserCleared() && len(suo.mutation.UserIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Stake.user"`)
	}
	if suo.mutation.StockCleared() && len(suo.mutation.StockIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Stake.stock"`)
	}
	return nil
}

func (suo *StakeUpdateOne) sqlSave(ctx context.Context) (_node *Stake, err error) {
	if err := suo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(stake.Table, stake.Columns, sqlgraph.NewFieldSpec(stake.FieldID, field.TypeInt))
	id, ok := suo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Stake.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := suo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, stake.FieldID)
		for _, f := range fields {
			if !stake.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != stake.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := suo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := suo.mutation.Amount(); ok {
		_spec.SetField(stake.FieldAmount, field.TypeInt, value)
	}
	if value, ok := suo.mutation.AddedAmount(); ok {
		_spec.AddField(stake.FieldAmount, field.TypeInt, value)
	}
	if suo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   stake.UserTable,
			Columns: []string{stake.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   stake.UserTable,
			Columns: []string{stake.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if suo.mutation.StockCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   stake.StockTable,
			Columns: []string{stake.StockColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(stock.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.StockIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   stake.StockTable,
			Columns: []string{stake.StockColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(stock.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Stake{config: suo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, suo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{stake.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	suo.mutation.done = true
	return _node, nil
}
